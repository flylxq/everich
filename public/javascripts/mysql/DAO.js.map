{"version":3,"sources":["DAO.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IASqB,GAAG;AACpB,aADiB,GAAG,CACR,KAAK,EAAE;8BADF,GAAG;;AAEhB,YAAI,CAAC,IAAI,cAAO,CAAA;AAChB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAA;KACrB;;iBAJgB,GAAG;;8BAMd,GAAG,EAAE,MAAM,EAAE;gBACT,IAAI,GAAK,IAAI,CAAb,IAAI;;AAEV,mBAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAC;AACxC,oBAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE;AACtD,wBAAG,GAAG,EAAE;AACJ,2BAAG,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;AACnC,2BAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAA;AACnB,8BAAM,CAAC,GAAG,CAAC,CAAA;qBACd,MAAM;AACH,+BAAO,CAAC,MAAM,CAAC,CAAA;qBAClB;iBACJ,CAAC,CAAA;aACL,CAAC,CAAA;SACL;;;+BAEM,MAAM,EAAE;gBACL,KAAK,GAAK,IAAI,CAAd,KAAK;;AAEX,gBAAI,GAAG,GAAG,cAAc,GAAG,KAAK,GAAG,QAAQ,CAAA;AAC3C,mBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;SACjC;;;+BAEM,MAAM,EAAE;AACX,gBAAI,EAAE,GAAG,EAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAC,CAAA;AACxB,mBAAO,MAAM,CAAC,EAAE,CAAA;gBACV,KAAK,GAAK,IAAI,CAAd,KAAK;;AACX,gBAAI,GAAG,GAAG,SAAS,GAAG,KAAK,GAAE,gBAAgB,CAAA;AAC7C,mBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAA;SACvC;;;6BAEI,EAAE,EAAE;gBACC,KAAK,GAAK,IAAI,CAAd,KAAK;;AACX,gBAAI,GAAG,GAAG,gBAAgB,GAAG,KAAK,IAAI,EAAE,KAAK,SAAS,GAAG,eAAe,GAAG,EAAE,CAAA,AAAC,CAAA;AAC9E,mBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;SAC/B;;;gCAEM,EAAE,EAAE;gBACD,KAAK,GAAK,IAAI,CAAd,KAAK;;AACX,gBAAI,GAAG,GAAG,cAAc,GAAG,KAAK,GAAE,eAAe,CAAA;AACjD,mBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;SAC/B;;;WA/CgB,GAAG;;;kBAAH,GAAG","file":"DAO.js","sourcesContent":["/**\r\n * Created by Xiaoqing Liu\r\n * 2016/02/16\r\n *\r\n * Mysql basic data access object\r\n */\r\n\r\nimport { Pool } from './mysql'\r\n\r\nexport default class DAO {\r\n    constructor(table) {\r\n        this.Pool = Pool\r\n        this.table = table\r\n    }\r\n\r\n    query(sql, object) {\r\n        let { Pool } = this\r\n\r\n        return new Promise(function(resolve, reject){\r\n            let query = Pool.query(sql, object, function(err, result) {\r\n                if(err) {\r\n                    err.object = JSON.stringify(object)\r\n                    err.sql = query.sql\r\n                    reject(err)\r\n                } else {\r\n                    resolve(result)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    create(object) {\r\n        let { table } = this\r\n\r\n        let sql = 'INSERT INTO ' + table + ' SET ?'\r\n        return this.query(sql, object)\r\n    }\r\n\r\n    update(object) {\r\n        let id = {id: object.id}\r\n        delete object.id\r\n        let { table } = this\r\n        let sql = 'UPDATE ' + table +' SET ? WHERE ?'\r\n        return this.query(sql, [object, id])\r\n    }\r\n\r\n    read(id) {\r\n        let { table } = this\r\n        let sql = 'SELECT * FROM ' + table + (id !== undefined ? ' WHERE id = ?' : '')\r\n        return this.query(sql, [id])\r\n    }\r\n\r\n    delete(id) {\r\n        let { table } = this\r\n        let sql = 'DELETE FROM ' + table +' WHERE id = ?'\r\n        return this.query(sql, [id])\r\n    }\r\n}"]}
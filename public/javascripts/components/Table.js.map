{"version":3,"sources":["Table.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAKO,IAAI,WAAW,WAAX,WAAW,GAAG,gBAAM,WAAW,CAAC;;;AACvC,mBAAe,EAAE,2BAAW;AACxB,eAAO;AACH,gBAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;SAC9B,CAAA;KACJ;AACD,cAAU,EAAE,oBAAS,GAAG,EAAE;qBACO,IAAI,CAAC,KAAK;YAAjC,OAAO,UAAP,OAAO;YAAE,SAAS,UAAT,SAAS;;AACxB,YAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;AACtB,mBACI;;;gBACI;;sBAAQ,OAAO,EAAG,SAAS,EAAC,OAAO,EAAI;mCAAM,OAAO,CAAC,GAAG,CAAC;yBAAA,AAAC;oBACtD,wCAAM,SAAS,EAAG,4BAA4B,GAAQ;;iBAEjD;gBACT;;sBAAQ,OAAO,EAAG,QAAQ,EAAC,OAAO,EAAI;mCAAM,SAAS,CAAC,GAAG,CAAC;yBAAA,AAAC;oBACvD,wCAAM,SAAS,EAAG,4BAA4B,GAAQ;;iBAEjD;aACR,CACR;SACJ;KACJ;AACD,cAAU,EAAE,oBAAS,KAAK,EAAE;AACxB,YAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;AACtB,mBAAQ;;;gBAAK,KAAK,GAAG,CAAC;aAAM,CAAC;SAChC;KACJ;AACD,UAAM,EAAE,kBAAW;;;sBAC0B,IAAI,CAAC,KAAK;YAA7C,MAAM,WAAN,MAAM;YAAE,UAAU,WAAV,UAAU;YAAE,UAAU,WAAV,UAAU;;AACpC,YAAI,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,GAAG;mBAAK,GAAG,CAAC,KAAK;SAAA,CAAC,CAAA;AAC7C,kBAAU,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AACpC,kBAAU,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAC9B,IAAI,GAAK,IAAI,CAAC,KAAK,CAAnB,IAAI;;AACV,YAAI,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;mBAAK;;kBAAI,GAAG,EAAI,KAAK,AAAC;gBAAE,MAAM;aAAM;SAAA,CAAC;YAC9E,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK,EAAK;AAC/B,gBAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK;uBAAK;;sBAAI,GAAG,EAAI,KAAK,AAAC;oBAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;iBAAM;aAAA,CAAC,CAAA;AAC1E,mBACI;;kBAAI,GAAG,EAAI,KAAK,AAAC;gBACZ,MAAK,UAAU,CAAC,CAAC,CAAC;gBAClB,MAAK,UAAU,CAAC,KAAK,CAAC;gBACtB,IAAI;aACJ,CACR;SACJ,CAAC,CAAA;;AAEN,eACI;;cAAO,UAAU,MAAA;AACV,uBAAO,MAAA;AACP,qBAAK,MAAA;AACL,yBAAS,MAAA;YACZ;;;gBAAO;;;oBAAK,WAAW;iBAAM;aAAQ;YACrC;;;gBAAQ,SAAS;aAAS;SACtB,CACX;KACJ;CACJ,CAAC,CAAA","file":"Table.js","sourcesContent":["/**\r\n *\r\n */\r\nimport React from 'react'\r\nimport { Table, Button } from 'react-bootstrap'\r\nexport let ManageTable = React.createClass({\r\n    getInitialState: function() {\r\n        return {\r\n            data: this.props.data || []\r\n        }\r\n    },\r\n    _adminNode: function(row) {\r\n        let { editRow, deleteRow } = this.props\r\n        if(this.props.tableAdmin) {\r\n            return (\r\n                <td>\r\n                    <Button bsStyle = 'warning' onClick = {() => editRow(row)}>\r\n                        <span className = 'glyphicon glyphicon-pencil'></span>\r\n                        Edit\r\n                    </Button>\r\n                    <Button bsStyle = 'danger' onClick = {() => deleteRow(row)}>\r\n                        <span className = 'glyphicon glyphicon-remove'></span>\r\n                        Delete\r\n                    </Button>\r\n                </td>\r\n            )\r\n        }\r\n    },\r\n    _indexNode: function(index) {\r\n        if(this.props.tableIndex) {\r\n            return (<td>{index + 1}</td>)\r\n        }\r\n    },\r\n    render: function() {\r\n        let { schema, tableAdmin, tableIndex } = this.props\r\n        let theaders = schema.map((key) => key.label)\r\n        tableIndex && theaders.unshift('序号')\r\n        tableAdmin && theaders.unshift('管理')\r\n        let { data } = this.state\r\n        var headerNodes = theaders.map((header, index) => <th key = {index}>{header}</th>),\r\n            bodyNodes = data.map((d, index) => {\r\n                let rows = schema.map((key, index) => <td key = {index}>{d[key.key]}</td>)\r\n                return (\r\n                    <tr key = {index}>\r\n                        {this._adminNode(d)}\r\n                        {this._indexNode(index)}\r\n                        {rows}\r\n                    </tr>\r\n                )\r\n            })\r\n\r\n        return (\r\n            <Table responsive\r\n                   striped\r\n                   hover\r\n                   condensed>\r\n                <thead><tr>{headerNodes}</tr></thead>\r\n                <tbody>{bodyNodes}</tbody>\r\n            </Table>\r\n        )\r\n    }\r\n})"]}